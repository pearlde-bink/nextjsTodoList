"use client";
// import type { Metadata } from "next";
import React, { Component } from "react";
import { Inter } from "next/font/google";
import "./globals.css";
import AddWorkForm from "./pages/AddWorkForm";
import Header from "./components/Header";
import Pagination from "./components/PaginationControls";
import ToDoListButton from "./pages/ToDoListTableButton";
import ToDoListTable from "./pages/ToDoListTable";

const inter = Inter({ subsets: ["latin"] });

// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

interface Todos {
  id: string;
  title: string;
  status: string;
}

interface State {
  todos: Todos[];
  todolistwithkw: Todos[];
  keyword: string;
  currentPage: number;
  todoPerPage: number;
  indexOfLastTodo: number;
  indexOfFirstTodo: number;
  currentTodos: Todos[];
  isAddFormVisible: boolean;
  isChangeTodo: boolean;

  todoToEdit: Todos;
}

class RootLayout extends Component<{}, State> {
  state: State = {
    todos: [],
    todolistwithkw: [],
    keyword: "",
    currentPage: 1,
    todoPerPage: 5,
    indexOfLastTodo: 4,
    indexOfFirstTodo: 0,
    currentTodos: [],
    isAddFormVisible: false,
    isChangeTodo: false,

    todoToEdit: { id: "", title: "", status: "" },
  };

  reState = (tdl: Todos) => {
    const newtodolist = [...this.state.todos, tdl];
    this.setState(
      { todos: newtodolist, todolistwithkw: newtodolist },
      this.updateCurrentTodos
    );
  };

  setCurrentPage = (pageNum: number) => {
    this.setState({ currentPage: pageNum }, this.updateCurrentTodos);
  };

  componentDidMount(): void {
    //to fetch data
    this.fetchTodos();
  }

  fetchTodos = async () => {
    try {
      const res = await fetch("http://localhost:8000/todo");
      const todos = await res.json();
      this.setState({ todos }, this.updateCurrentTodos);
    } catch (error) {
      console.error("Failed to fetch todos:", error);
    }
  };

  toggleAddFormVisible = () => {
    this.setState((prevState) => ({
      isAddFormVisible: !prevState.isAddFormVisible,
    }));
    this.setState({
      isChangeTodo: false,
    });
  };

  toggleChangeTodo = (todo: Todos) => {
    this.setState((prevState) => ({
      isChangeTodo: !prevState.isChangeTodo,
    }));
    this.setState({
      todoToEdit: todo,
      isAddFormVisible: false,
      isChangeTodo: true,
    });
  };

  changeTodo = (id: string, title: string, status: string) => {
    const todoToUpdate = this.state.todos.find((todo) => todo.id === id);
    if (!todoToUpdate) return;

    const updatedTodo = { ...todoToUpdate, id, title, status }; //change-todo with new values
    let newtodos;
    try {
      //update that todo in db
      fetch(`http://localhost:8000/todo/${id}`, {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(updatedTodo),
      });
      //new array with updated todo
      newtodos = this.state.todos.map((todo) =>
        todo.id === id ? updatedTodo : todo
      );
      // update in state
      this.setState(
        {
          todos: newtodos,
          todolistwithkw: newtodos.filter((todo) =>
            todo.title.toLowerCase().includes(this.state.keyword.toLowerCase())
          ),
        },
        this.updateCurrentTodos
      );
      console.log("Changed todo: ", updatedTodo);
    } catch (error) {
      console.error("Failed to change todo:", error);
    }
  };

  toggleToDoStatus = async (id: string) => {
    const clickTodo = this.state.todos.find((todo) => todo.id === id);
    if (!clickTodo) return "not found";
    const newStatus = clickTodo.status === "Kích Hoạt" ? "Ẩn" : "Kích Hoạt";

    try {
      await fetch(`http://localhost:8000/todo/${id}`, {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ ...clickTodo, status: newStatus }),
      });
      const newtodos = this.state.todos.map((todo) => {
        if (todo.id === id) {
          if (todo.status === "Kích Hoạt") todo.status = "Ẩn";
          else if (todo.status === "Ẩn") todo.status = "Kích Hoạt";
          return todo;
        }
        return todo;
      });
      this.setState(
        {
          todos: newtodos,
          todolistwithkw: newtodos,
        },
        this.updateCurrentTodos
      );
      console.log("Changed todo status");
    } catch (error) {
      console.error("Failed to change todo status:", error);
    }
  };

  removeTodo = async (id: string) => {
    try {
      await fetch(`http://localhost:8000/todo/${id}`, {
        method: "DELETE",
      });
      const newtodos = this.state.todos.filter(
        (todo) => (todo.id as unknown as string) !== id
      );
      this.setState(
        {
          todos: newtodos,
          todolistwithkw: newtodos,
        },
        this.updateCurrentTodos
      );
      console.log("Deleted todo");
    } catch (error) {
      console.error("Failed to delete todo:", error);
    }
  };

  findTodo = (keyword: string) => {
    const todolistwithkw = this.state.todos.filter((todo) =>
      todo.title.toLowerCase().includes(keyword.toLowerCase())
    );
    this.setState({ todolistwithkw, keyword });
  };

  sortTodoAZ = () => {
    const sortedTodos = this.state.todolistwithkw
      .slice()
      .sort((a, b) => a.title.localeCompare(b.title));
    this.setState({ todolistwithkw: sortedTodos });
  };

  sortTodoZA = () => {
    const sortedTodos = this.state.todolistwithkw
      .slice()
      .sort((b, a) => a.title.localeCompare(b.title));
    this.setState({ todolistwithkw: sortedTodos });
  };

  sortActivate = () => {
    const sortActivateList = this.state.currentTodos.filter(
      (todo) => todo.status === "Kích Hoạt"
    );

    this.setState({ todolistwithkw: sortActivateList });
  };

  sortDeactivate = () => {
    const sortDeactivateList = this.state.currentTodos.filter(
      (todo) => todo.status === "Ẩn"
    );

    this.setState({ todolistwithkw: sortDeactivateList });
  };

  seeAllCurrent = () => {
    this.setState({ todolistwithkw: this.state.currentTodos });
  };

  handleSeeAll = () => {
    this.setState({
      todos: this.state.todos,
      todolistwithkw: this.state.todos,
    });
  };

  findTodoInPage = (keyword: string) => {
    const { currentTodos } = this.state;
    const filteredTodos = currentTodos.filter((todo) =>
      todo.title.toLowerCase().includes(keyword.toLowerCase())
    );
    this.setState({ todolistwithkw: filteredTodos, keyword });
  };

  handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const keyword = event.target.value;
    this.setState({ keyword }, () => this.findTodoInPage(keyword));
  };

  updateCurrentTodos = () => {
    const { todos, currentPage, todoPerPage, keyword } = this.state;
    const indexOfLastTodo = currentPage * todoPerPage;
    const indexOfFirstTodo = indexOfLastTodo - todoPerPage;
    const currentTodos = todos.slice(indexOfFirstTodo, indexOfLastTodo);
    this.setState({ currentTodos }, () => this.findTodoInPage(keyword));
  };

  hadlePageChange = (pageNum: number) => {
    //change todo list when click pagination
    this.setCurrentPage(pageNum);
  };

  render() {
    return (
      <html lang="en">
        <body className={inter.className}>
          <Header />
          <div className="row">
            {(this.state.isAddFormVisible || this.state.isChangeTodo) && (
              <AddWorkForm
                updateCurrentTodos={this.updateCurrentTodos}
                isAddFormVisible={this.state.isAddFormVisible}
                isChangeTodo={this.state.isChangeTodo}
                todoToEdit={this.state.todoToEdit}
                reState={this.reState}
                changeTodo={this.changeTodo}
                toggleAddFormVisible={this.toggleAddFormVisible}
                toggleChangeTodo={this.toggleChangeTodo}
              />
            )}
            <div className="col-xs-8 col-sm-8 col-md-8 col-lg-8">
              <ToDoListButton
                findTodo={this.findTodo}
                sortTodoAZ={this.sortTodoAZ}
                sortTodoZA={this.sortTodoZA}
                handleSeeAll={this.handleSeeAll}
                sortActivate={this.sortActivate}
                sortDeactivate={this.sortDeactivate}
                seeAllCurrent={this.seeAllCurrent}
                toggleAddFormVisible={this.toggleAddFormVisible}
              />
              <ToDoListTable
                todos={this.state.todolistwithkw}
                todolistwithkw={this.state.todolistwithkw}
                removeTodo={this.removeTodo}
                toggleToDoStatus={this.toggleToDoStatus}
                toggleAddFormVisible={this.toggleAddFormVisible}
                handleInputChange={this.handleInputChange}
                toggleChangeTodo={this.toggleChangeTodo}
                reState={this.reState}
              />
            </div>
          </div>
          <Pagination
            todoPerPage={this.state.todoPerPage}
            length={this.state.todos.length}
            setCurrentPage={this.setCurrentPage}
            handlePageChange={this.hadlePageChange}
          />
        </body>
      </html>
    );
  }
}

export default RootLayout;
