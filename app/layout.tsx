"use client";
import React, { Component } from "react";
// import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.css";
import AddWorkForm from "./pages/AddWorkForm";
import Header from "./components/Header";
import ToDoListButton from "./pages/ToDoListTableButton";
import ToDoListTable from "./pages/ToDoListTable";

const inter = Inter({ subsets: ["latin"] });

// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

interface Todos {
  id: number;
  title: string;
  status: string;
}

interface State {
  todos: Todos[];
  todolistwithkw: Todos[];
  keyword: string;
}

class RootLayout extends Component<{}, State> {
  state: State = {
    todos: [],
    todolistwithkw: [],
    keyword: "",
  };

  componentDidMount(): void {
    //to fetch data
    this.fetchTodos();
  }

  fetchTodos = async () => {
    try {
      const res = await fetch("http://localhost:8000/todo");
      const todos = await res.json();
      this.setState({ todos, todolistwithkw: todos });
    } catch (error) {
      console.error("Failed to fetch todos:", error);
    }
  };

  toggleToDoStatus = async (id: number) => {
    const clickTodo = this.state.todos.find((todo) => todo.id === id);
    if (!clickTodo) return "not found";
    const newStatus = clickTodo.status === "Kích Hoạt" ? "Ẩn" : "Kích Hoạt";

    try {
      await fetch(`http://localhost:8000/todo/${id}`, {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ ...clickTodo, status: newStatus }),
      });
      const newtodos = this.state.todos.map((todo) => {
        if (todo.id === id) {
          if (todo.status === "Kích Hoạt") todo.status = "Ẩn";
          else if (todo.status === "Ẩn") todo.status = "Kích Hoạt";
          return todo;
        }
        return todo;
      });
      this.setState(() => ({
        todos: newtodos,
        todolistwithkw: newtodos,
      }));
      console.log("Changed todo status");
    } catch (error) {
      console.error("Failed to change todo status:", error);
    }
  };

  removeTodo = async (id: number) => {
    try {
      await fetch(`http://localhost:8000/todo/${id}`, {
        method: "DELETE",
      });
      const newtodos = this.state.todos.filter((todo) => todo.id !== id);
      this.setState(() => ({
        todos: newtodos,
        todolistwithkw: newtodos,
      }));
      console.log("Deleted todo");
    } catch (error) {
      console.error("Failed to delete todo:", error);
    }
  };

  addTodo = (title: string, status: string) => {
    try {
      const newTodo: Todos = {
        id: this.state.todos.length + 1,
        title,
        status,
      };

      const newtodos = [...this.state.todos, newTodo];
      this.setState({
        todos: newtodos,
        todolistwithkw: newtodos,
      });
      console.log("added");
    } catch (error) {
      console.error("Failed to add todo:", error);
    }
  };

  changeTodoTitle = async (id: number, title: string) => {
    const todoToUpdate = this.state.todos.find((todo) => todo.id === id);
    if (!todoToUpdate) return;

    const updatedTodo = { ...todoToUpdate, title };

    try {
      await fetch(`http://localhost:8000/todo/${id}`, {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(updatedTodo),
      });

      const newtodos = this.state.todos.map((todo) =>
        todo.id === id ? updatedTodo : todo
      );

      this.setState({
        todos: newtodos,
        todolistwithkw: newtodos.filter((todo) =>
          todo.title.toLowerCase().includes(this.state.keyword.toLowerCase())
        ),
      });
      console.log("Changed todo title");
    } catch (error) {
      console.error("Failed to change todo title:", error);
    }
  };

  findTodo = (keyword: string) => {
    const todolistwithkw = this.state.todos.filter((todo) =>
      todo.title.toLowerCase().includes(keyword.toLowerCase())
    );
    this.setState({ todolistwithkw, keyword });
  };

  sortTodoAZ = () => {
    const sortedTodos = this.state.todolistwithkw.slice().sort((a, b) => {
      if (a.title < b.title) return -1;
      if (a.title > b.title) return 1;
      return 0;
    });
    this.setState({ todolistwithkw: sortedTodos });
  };

  sortTodoZA = () => {
    const sortedTodos = this.state.todolistwithkw.slice().sort((a, b) => {
      if (a.title < b.title) return 1;
      if (a.title > b.title) return -1;
      return 0;
    });
    this.setState({ todolistwithkw: sortedTodos });
  };

  handleSeeAll = () => {
    this.setState({ todolistwithkw: this.state.todos });
  };

  render() {
    return (
      <html lang="en">
        <body className={inter.className}>
          <Header />
          <div className="row">
            <AddWorkForm addTodo={this.addTodo} />
            <div className="col-xs-8 col-sm-8 col-md-8 col-lg-8">
              <ToDoListButton
                findTodo={this.findTodo}
                sortTodoAZ={this.sortTodoAZ}
                sortTodoZA={this.sortTodoZA}
                handleSeeAll={this.handleSeeAll}
              ></ToDoListButton>

              <ToDoListTable
                todos={this.state.todolistwithkw}
                todolistwithkw={this.state.todolistwithkw}
                removeTodo={this.removeTodo}
                toggleToDoStatus={this.toggleToDoStatus}
                changeTodoTitle={this.changeTodoTitle}
              ></ToDoListTable>
            </div>
          </div>
        </body>
      </html>
    );
  }
}

export default RootLayout;
